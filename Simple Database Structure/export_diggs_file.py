import sqlite3
import pandas as pd
import numpy as np
from lxml import etree
from datetime import date

def connect_to_database(db_path):
    return sqlite3.connect(db_path)

def fetch_data(conn):
    info_df = pd.read_sql_query("SELECT * FROM Point_Table", conn)
    blows_df = pd.read_sql_query("SELECT * FROM SPT_Table", conn)
    lith_df = pd.read_sql_query("SELECT * FROM Lith_Table", conn)
    return info_df, blows_df, lith_df

def generate_diggs(info_df, blows_df, lith_df, key):
    root, NSMAP = create_root_element(key)
    add_document_information(root, key, NSMAP)
    for i in range(len(info_df)):
        project_element = add_project_elements(root, info_df, i, key, NSMAP)
        borehole_element = add_borehole_elements(root, info_df, lith_df, i, key, NSMAP)

    add_sampling_activity(root, blows_df, key, NSMAP)
    add_lithology_observations(root, lith_df, key, NSMAP)
    add_measurements(root, blows_df, key, NSMAP)

    xml = etree.tostring(root, pretty_print=True).decode()
    return xml

def create_root_element(key):
    DIGGS_NAMESPACE = "http://diggsml.org/schemas/2.6"
    DIGGS = f"{{{DIGGS_NAMESPACE}}}"
    NSMAP = {
        None: DIGGS_NAMESPACE,
        "xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "xlink": "http://www.w3.org/1999/xlink",
        "gml": "http://www.opengis.net/gml/3.2",
        "g3.3": "http://www.opengis.net/gml/3.3/ce",
        "glr": "http://www.opengis.net/gml/3.3/lr",
        "glrov": "http://www.opengis.net/gml/3.3/lrov",
        "diggs_geo": "http://diggsml.org/schemas/2.6/geotechnical", 
        "witsml": "http://www.witsml.org/schemas/131",
        "diggs": "http://diggsml.org/schemas/2.6",
    }

    XSI_QNAME = etree.QName("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation")
    GML_QNAME = etree.QName("http://www.opengis.net/gml/3.2", "id")

    root = etree.Element(DIGGS + 'Diggs', {
        XSI_QNAME: 'http://diggsml.org/schemas/2.6 http://diggsml.org/schemas/2.6/Diggs.xsd',
        GML_QNAME: f'Geosetta_Exported'
    }, nsmap=NSMAP)
    return root, NSMAP

def add_document_information(root, key, NSMAP):
    document_information = etree.SubElement(root, 'documentInformation')
    doc_info = etree.SubElement(document_information, 'DocumentInformation')
    doc_info.set(f"{{{NSMAP['gml']}}}id", f'Geosetta_root_{key}')
    creation_date = etree.SubElement(doc_info, 'creationDate')
    creation_date.text = str(date.today())
    audit_trail = etree.SubElement(doc_info, 'auditTrail')
    remark = etree.SubElement(audit_trail, 'Remark')
    content = etree.SubElement(remark, 'content')
    content.text = "Generated by Geosetta"

def add_project_elements(root, info_df, i, key, NSMAP):
    project = etree.SubElement(root, 'project')
    project_element = etree.SubElement(project, 'Project')
    project_element.set(f"{{{NSMAP['gml']}}}id", f'Project{i}')
    project_name = etree.SubElement(project_element, f"{{{NSMAP['gml']}}}name")
    project_name.text = 'Geosetta_Generated'
    role = etree.SubElement(project_element, 'role')
    role_element = etree.SubElement(role, 'Role')
    role_performed = etree.SubElement(role_element, 'rolePerformed')
    role_performed.text = 'Client'
    purpose = etree.SubElement(project_element, 'purpose')
    purpose.text = 'Geosetta Export'
    business_associate = etree.SubElement(role_element, 'businessAssociate')
    business_associate_element = etree.SubElement(business_associate, 'BusinessAssociate')
    business_associate_element.set(f"{{{NSMAP['gml']}}}id", f'businessAssociate_{key}_Num_{i}')
    borehole_gml_name = etree.SubElement(business_associate_element, f"{{{NSMAP['gml']}}}name")
    borehole_gml_name.text = info_df.iloc[i]['spt_source']
    return project_element

def add_borehole_elements(root, info_df, lith_df, i, key, NSMAP):
    sampling_feature = etree.SubElement(root, 'samplingFeature')
    borehole = etree.SubElement(sampling_feature, 'Borehole')
    borehole.set(f"{{{NSMAP['gml']}}}id", f'Borehole_Num_{i+1}')
    borehole_name = etree.SubElement(borehole, f"{{{NSMAP['gml']}}}name")
    borehole_name.text = f'BH-{i+1}'
    investigation_target = etree.SubElement(borehole, 'investigationTarget')
    investigation_target.text = 'Natural Ground'
    project_ref = etree.SubElement(borehole, 'projectRef')
    project_ref.set(f"{{{NSMAP['xlink']}}}href", f'#Project{i}')
    reference_point = etree.SubElement(borehole, 'referencePoint')
    point_location = etree.SubElement(reference_point, 'PointLocation')
    point_location.set(f"{{{NSMAP['gml']}}}id", f'Point_Location{key}_Num_{i}-pl')
    gml_pos = etree.SubElement(point_location, f"{{{NSMAP['gml']}}}pos")
    gml_pos.set('srsDimension', '3')
    gml_pos.set('srsName', 'urn:diggs:def:crs:DIGGS:0.1:4326_5702')
    gml_pos.set('uomLabels', 'degrees')
    gml_pos.text = f"{info_df.iloc[i]['longitude']} {info_df.iloc[i]['latitude']} {info_df.iloc[i]['elevation']}"
    center_line = etree.SubElement(borehole, 'centerLine')
    linear_extent = etree.SubElement(center_line, 'LinearExtent')
    linear_extent.set(f"{{{NSMAP['gml']}}}id", f'Linear_Extent_{i}')
    gml_pos_list = etree.SubElement(linear_extent, f"{{{NSMAP['gml']}}}posList")
    max_depth = lith_df[lith_df['functionalkey'] == info_df.iloc[i]['functionalkey']]['sample_bottom'].max()
    gml_pos_list.text = f"{info_df.iloc[i]['longitude']} {info_df.iloc[i]['latitude']} {info_df.iloc[i]['elevation']} {info_df.iloc[i]['latitude']} {info_df.iloc[i]['longitude']} {info_df.iloc[i]['elevation']-max_depth}"
    linear_referencing = etree.SubElement(borehole, 'linearReferencing')
    linear_referencing_system = etree.SubElement(linear_referencing, 'LinearSpatialReferenceSystem')
    linear_referencing_system.set(f"{{{NSMAP['gml']}}}id", 'lrs')
    linear_gml_identifier = etree.SubElement(linear_referencing_system, f"{{{NSMAP['gml']}}}identifier")
    linear_gml_identifier.set('codeSpace', '')
    linear_element = etree.SubElement(linear_referencing_system, f"{{{NSMAP['glr']}}}linearElement")
    linear_element.set(f"{{{NSMAP['xlink']}}}href", f'#Linear_Extent_{i}')
    glr_lrm = etree.SubElement(linear_referencing_system, f"{{{NSMAP['glr']}}}lrm")
    glr_linear_referencing_method = etree.SubElement(glr_lrm, f"{{{NSMAP['glr']}}}LinearReferencingMethod")
    glr_linear_referencing_method.set(f"{{{NSMAP['gml']}}}id", f'Linear_Extent_{i}_')
    glr_name = etree.SubElement(glr_linear_referencing_method, f"{{{NSMAP['glr']}}}name")
    glr_name.text = 'chainage'
    glr_type = etree.SubElement(glr_linear_referencing_method, f"{{{NSMAP['glr']}}}type")
    glr_type.text = 'absolute'
    glr_units = etree.SubElement(glr_linear_referencing_method, f"{{{NSMAP['glr']}}}units")
    glr_units.text = 'ft'
    when_constructed = etree.SubElement(borehole, 'whenConstructed')
    time_interval = etree.SubElement(when_constructed, 'TimeInterval')
    time_interval.set(f"{{{NSMAP['gml']}}}id", f'time_Num_{i}')
    start = etree.SubElement(time_interval, 'start')
    start.text = str(info_df.iloc[i]['date_complete'])
    end = etree.SubElement(time_interval, 'end')
    end.text = str(info_df.iloc[i]['date_complete'])
    total_measured_depth = etree.SubElement(borehole, 'totalMeasuredDepth')
    total_measured_depth.set('uom', 'ft')
    total_measured_depth.text = str(info_df.iloc[i]['total_depth'])
    return borehole

def add_sampling_activity(root, blows_df, key, NSMAP):
    for x in range(len(blows_df)):
        sampling_activity = etree.SubElement(root, 'samplingActivity')
        sampling_activity_element = etree.SubElement(sampling_activity, 'SamplingActivity')
        sampling_activity_element.set(f"{{{NSMAP['gml']}}}id", f'SA_S{x}')
        gml_name = etree.SubElement(sampling_activity_element, f"{{{NSMAP['gml']}}}name")
        gml_name.text = str(blows_df.iloc[x]['sample_num'])
        gml_target = etree.SubElement(sampling_activity_element, 'investigationTarget')
        gml_target.text = "Natural Ground"
        project_ref = etree.SubElement(sampling_activity_element, 'projectRef')
        project_ref.set(f"{{{NSMAP['xlink']}}}href", '#Geosetta_Generated')
        sampling_ref = etree.SubElement(sampling_activity_element, 'samplingFeatureRef')
        sampling_ref.set(f"{{{NSMAP['xlink']}}}href", f'#Borehole_Num_{x+1}')
        sampling_location = etree.SubElement(sampling_activity_element, 'samplingLocation')
        sampling_linear_extent = etree.SubElement(sampling_location, 'LinearExtent')
        sampling_linear_extent.set(f"{{{NSMAP['gml']}}}id", f'SL_LinearExtent_{key}_Num_{x}')
        sampling_linear_extent.set('srsDimension', '1')
        sampling_linear_extent.set('srsName', f'srs_{x}')
        gml_pos_list = etree.SubElement(sampling_linear_extent, f"{{{NSMAP['gml']}}}posList")
        gml_pos_list.text = f"{blows_df.iloc[x]['sample_top']} {blows_df.iloc[x]['sample_bottom']}"
        activity_type = etree.SubElement(sampling_activity_element, 'activityType')
        activity_type.text = "collect"
        add_sample_produced(sampling_activity_element, blows_df, x, key, NSMAP)
        add_sampling_method(sampling_activity_element, x, key, blows_df, NSMAP)

def add_lithology_observations(root, lith_df, key, NSMAP):
    for x in range(len(lith_df)):
        observation = etree.SubElement(root, 'observation')
        lithology_system = etree.SubElement(observation, 'LithologySystem')
        lithology_system.set(f"{{{NSMAP['gml']}}}id", f'Lith_Borehole_{key}_Num_{x}')
        project_ref = etree.SubElement(lithology_system, 'projectRef')
        project_ref.set(f"{{{NSMAP['xlink']}}}href", '#Geosetta_Generated')
        sampling_ref = etree.SubElement(lithology_system, 'samplingFeatureRef')
        sampling_ref.set(f"{{{NSMAP['xlink']}}}href", f'#Borehole_Num_{x+1}')
        lithology_classification_type = etree.SubElement(lithology_system, 'lithologyClassificationType')
        lithology_classification_type.text = 'USCS'
        lithology_observation = etree.SubElement(lithology_system, 'lithologyObservation')
        lith_observation = etree.SubElement(lithology_observation, 'LithologyObservation')
        lith_observation.set(f"{{{NSMAP['gml']}}}id", f'LithologyObservation_Borehole_{key}_Num_{x}')
        lithology_system.set(f"{{{NSMAP['gml']}}}id", f'Litho_Soil_Observation_{x}_{lith_df.iloc[x]["sample_top"]}')
        lith_location = etree.SubElement(lith_observation, 'location')
        lith_linear_extent = etree.SubElement(lith_location, 'LinearExtent')
        lith_linear_extent.set(f"{{{NSMAP['gml']}}}id", f'LinearExtent_Num_{x}{key}')
        lith_linear_extent.set('srsName', f'{key}_Srs')
        lith_linear_extent.set('srsDimension', '1')
        gml_pos_list = etree.SubElement(lith_linear_extent, f"{{{NSMAP['gml']}}}posList")
        gml_pos_list.text = f"{lith_df.iloc[x]['sample_top']} {lith_df.iloc[x]['sample_bottom']}"
        primary_lithology = etree.SubElement(lith_observation, 'primaryLithology')
        lithology = etree.SubElement(primary_lithology, 'Lithology')
        lithology.set(f"{{{NSMAP['gml']}}}id", f'Lith_BoreHole_{key}_Num_{x}')
        lith_description = etree.SubElement(lithology, 'lithDescription')
        lith_description.text = str(lith_df.iloc[x]['desc_and_notes'])
        field_properties = etree.SubElement(lithology, 'fieldProperties')
        field_props = etree.SubElement(field_properties, 'FieldProperties')
        field_props.set(f"{{{NSMAP['gml']}}}id", f'FieldProperties{key}_Num_{x}')
        other_field_property = etree.SubElement(field_props, 'otherFieldProperty')
        parameter = etree.SubElement(other_field_property, 'Parameter')
        parameter.set(f"{{{NSMAP['gml']}}}id", f'fieldPropertiesParameter{key}_Num_{x}')
        parameter_name = etree.SubElement(parameter, 'parameterName')
        parameter_name.text = 'Graphic'
        parameter_value = etree.SubElement(parameter, 'parameterValue')
        parameter_value.text = str(findgraphic(lith_df.iloc[x]['desc_and_notes']))

def add_measurements(root, blows_df, key, NSMAP):
    for x in range(len(blows_df)):
        measurement = etree.SubElement(root, 'measurement')
        test = etree.SubElement(measurement, 'Test')
        test.set(f"{{{NSMAP['gml']}}}id", f'Measurement_BoreHole_{key}_Num_{x}')
        gml_name = etree.SubElement(test, f"{{{NSMAP['gml']}}}name")
        gml_name.text = "SPT"
        gml_target = etree.SubElement(test, 'investigationTarget')
        gml_target.text = "Natural Ground"
        project_ref = etree.SubElement(test, 'projectRef')
        project_ref.set(f"{{{NSMAP['xlink']}}}href", '#Geosetta_Generated')
        sampling_ref = etree.SubElement(test, 'samplingFeatureRef')
        sampling_ref.set(f"{{{NSMAP['xlink']}}}href", f'#Borehole_Num_{x+1}')
        outcome = etree.SubElement(test, 'outcome')
        test_result = etree.SubElement(outcome, "TestResult")
        test_result.set(f"{{{NSMAP['gml']}}}id", f'TestResult_Num_{x}')
        measurement_location = etree.SubElement(test_result, 'location')
        measurement_linear_extent = etree.SubElement(measurement_location, 'LinearExtent')
        measurement_linear_extent.set(f"{{{NSMAP['gml']}}}id", f'LinearExtent_{key}_Num_{x}_1')
        measurement_linear_extent = etree.SubElement(measurement_linear_extent, f"{{{NSMAP['gml']}}}posList")
        measurement_linear_extent.text = f"{blows_df.iloc[x]['sample_top']} {blows_df.iloc[x]['sample_bottom']}"
        results = etree.SubElement(test_result, 'results')
        result_set = etree.SubElement(results, 'ResultSet')
        parameters = etree.SubElement(result_set, 'parameters')
        property_parameters = etree.SubElement(parameters, 'PropertyParameters')
        property_parameters.set(f"{{{NSMAP['gml']}}}id", f'PropertyPara{x}')
        properties = etree.SubElement(property_parameters, 'properties')
        prop = etree.SubElement(properties, 'Property')
        prop.set('index', '1')
        prop.set(f"{{{NSMAP['gml']}}}id", f'property_Num_{x}_1')
        property_name = etree.SubElement(prop, 'propertyName')
        property_name.text = "N-Value"
        type_data = etree.SubElement(prop, 'typeData')
        type_data.text = "long"
        property_class = etree.SubElement(prop, 'propertyClass')
        property_class.set('codeSpace', 'urn:diggs:def:codelist:DIGGS:properties')
        property_class.text = "n_value"
        data_values = etree.SubElement(result_set, 'dataValues')
        data_values.set('cs', ',')
        data_values.set('ts', ' ')
        data_values.set('decimal', '.')
        try:
            if pd.isna(blows_df.iloc[x]['blow2']) and pd.isna(blows_df.iloc[x]['blow3']):
                data_values.text = str(int(blows_df.iloc[x]['blow1']))
            else:
                blow2 = int(blows_df.iloc[x]['blow2']) if not pd.isna(blows_df.iloc[x]['blow2']) else 0
                blow3 = int(blows_df.iloc[x]['blow3']) if not pd.isna(blows_df.iloc[x]['blow3']) else 0
                data_values.text = str(blow2 + blow3)
        except:
            data_values.text = 'N/A'
        add_procedure(test, blows_df, x, key, NSMAP)

def add_procedure(test, blows_df, x, key, NSMAP):
    procedure = etree.SubElement(test, 'procedure')
    driven_penetration_test = etree.SubElement(procedure, f"{{{NSMAP['diggs_geo']}}}DrivenPenetrationTest")
    driven_penetration_test.set(f"{{{NSMAP['gml']}}}id", f'penID_{x}_1')
    penetration_test_type = etree.SubElement(driven_penetration_test, f"{{{NSMAP['diggs_geo']}}}penetrationTestType")
    penetration_test_type.text = "SPT"
    total_penetration = etree.SubElement(driven_penetration_test, f"{{{NSMAP['diggs_geo']}}}totalPenetration")
    total_penetration.set('uom', 'in')
    try:
        length = (blows_df.iloc[x]['penetration1'] or 0) + (blows_df.iloc[x]['penetration2'] or 0) + (blows_df.iloc[x]['penetration3'] or 0) + (blows_df.iloc[x]['penetration4'] or 0)
    except:
        length = 18
    total_penetration.text = str(length)
    for i in range(1, 5):
        value = blows_df.iloc[x][f'blow{i}']
        integer_value = get_integer_value(value)

        if integer_value is not None:  # Only create driveSet if blowCount is not None
            drive_set = etree.SubElement(driven_penetration_test, f"{{{NSMAP['diggs_geo']}}}driveSet")
            drive_set_element = etree.SubElement(drive_set, f"{{{NSMAP['diggs_geo']}}}DriveSet")
            drive_set_element.set(f"{{{NSMAP['gml']}}}id", f'LinearExtent_{key}_Num_{x}_{i}')
            index = etree.SubElement(drive_set_element, f"{{{NSMAP['diggs_geo']}}}index")
            index.text = str(i)
            blow_count = etree.SubElement(drive_set_element, f"{{{NSMAP['diggs_geo']}}}blowCount")
            blow_count.text = str(integer_value)
            penetration = etree.SubElement(drive_set_element, f"{{{NSMAP['diggs_geo']}}}penetration")
            penetration.set('uom', 'in')
            penetration.text = str(blows_df.iloc[x].get(f'penetration{i}', 0))

def get_integer_value(value):
    if pd.isna(value):
        return None
    elif isinstance(value, int):
        return value
    elif isinstance(value, float) and value.is_integer():
        return int(value)
    else:
        return None
    

def generate_diggs_xml(db_path, output_path):
    conn = connect_to_database(db_path)
    info_df, blows_df, lith_df = fetch_data(conn)
    conn.close()

    key = "Geosetta_Export"  # You can modify this to generate a unique key if needed
    xml = generate_diggs(info_df, blows_df, lith_df, key)

    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(xml)

    print(f"DIGGS XML file has been generated and saved to {output_path}")

if __name__ == "__main__":
    db_path = "geotechnical_data.db"
    output_path = "diggs_export.xml"
    generate_diggs_xml(db_path, output_path)